/**
 * Components / Buttons
 *
 * Styles for button elements and button-styled links.
 * Includes variants for different colors and sizes.
 */

// Base button styles
.btn {
  // Display and Alignment
  display: inline-block;
  text-align: center;
  vertical-align: middle; // Align with adjacent inline elements

  // Typography
  font-weight: var(--qc-font-weight-base); // Use base font weight
  line-height: var(--qc-line-height-base); // Use base line height
  color: var(--qc-gray-700); // Default text color (adjust as needed)
  text-decoration: none; // Remove underline from link buttons

  // Interaction
  cursor: pointer;
  user-select: none; // Prevent text selection on buttons

  // Box Model
  background-color: transparent; // Default background
  border: var(--qc-border-width) var(--qc-border-style) transparent; // Default border
  // Base padding - use CSS vars for consistency? Or define here? Let's define here for now.
  padding: 0.375rem 0.75rem;
  font-size: var(--qc-font-size-base); // Use base font size
  border-radius: var(--qc-border-radius); // Use standard border radius

  // Transitions for smooth hover/focus effects
  transition: var(--qc-transition-base); // Use base transition

  // Remove default margin for specific elements used as buttons
  &[type="button"],
  &[type="reset"],
  &[type="submit"] {
    --webkit-appearance: button; // Correct inability to style clickable types in iOS/Safari
     margin: 0; // Remove default margins if any
  }

  // Hover and Focus States
  &:hover {
    text-decoration: none; // Ensure no underline on hover for link buttons
    // Default hover effect can be defined here or within variants
  }

  &:focus-visible {
    // Use the global focus-visible style from _reset.scss or define specific button focus
    outline: 2px solid var(--qc-primary); // Example focus style
    outline-offset: 2px;
    // Optional: Add a box-shadow for focus as well
    // box-shadow: 0 0 0 0.25rem rgba(var(--qc-primary-rgb), 0.5);
  }
  // Hide focus style if not using keyboard navigation (:focus-visible polyfill might be needed)
  &:focus:not(:focus-visible) {
      outline: 0;
      box-shadow: none;
  }


  // Disabled State
  &:disabled,
  &.disabled {
    pointer-events: none; // Prevent clicks and hover effects
    opacity: 0.65; // Visually indicate disabled state
    // Optional: Remove box-shadow on disabled state if focus styles add one
    // box-shadow: none;
  }
}


// --- Button Color Variants ---
// Loop through the theme colors defined in _variables.scss
// Requires SCSS map for theme colors or manual definition
// Let's assume $theme-colors map exists (or define manually below)
$theme-colors-map: (
  "primary": var(--qc-primary),
  "secondary": var(--qc-secondary),
  "success": var(--qc-success),
  "danger": var(--qc-danger),
  "warning": var(--qc-warning),
  "info": var(--qc-info),
  "light": var(--qc-light),
  "dark": var(--qc-dark)
) !default;

// Helper function to determine text color contrast (simplified version)
// A more robust function would calculate luminance.
@function qc-color-contrast($background-color) {
  // Simple check based on common theme color brightness
  @if ($background-color == var(--qc-light) or
       $background-color == var(--qc-warning) or
       $background-color == var(--qc-info) or
       $background-color == var(--qc-white)) { // Add other light colors if needed
    @return var(--qc-gray-900); // Dark text for light backgrounds
  } @else {
    @return var(--qc-white); // White text for dark backgrounds
  }
}


@each $color-name, $color-value in $theme-colors-map {
  .btn-#{$color-name} {
    color: qc-color-contrast($color-value);
    background-color: $color-value;
    border-color: $color-value;

    &:hover {
      // Darken background slightly on hover
      color: qc-color-contrast($color-value); // Ensure text color remains readable
      background-color: color-mix(in srgb, $color-value 85%, black);
      border-color: color-mix(in srgb, $color-value 80%, black);
    }

    &:focus-visible {
       // Adjust focus ring color based on button color
       // Requires RGB versions of theme colors defined as CSS vars (e.g., --qc-primary-rgb)
       $rgb-var-name: --qc-#{$color-name}-rgb;
       box-shadow: 0 0 0 0.25rem rgba(var(#{$rgb-var-name}, 0, 0, 0), 0.5); // Fallback to black if RGB var missing
       outline: none; // Use box-shadow for focus instead of outline
    }

     // Disabled state specific overrides if needed
     &:disabled,
     &.disabled {
       color: qc-color-contrast($color-value);
       background-color: $color-value;
       border-color: $color-value;
       // Opacity is handled by the base .btn:disabled style
     }
  }

  // Outline Button Variants
  .btn-outline-#{$color-name} {
    color: $color-value; // Text color matches the theme color
    border-color: $color-value;
    background-color: transparent; // No background initially

    &:hover {
      color: qc-color-contrast($color-value); // Invert colors on hover
      background-color: $color-value;
      border-color: $color-value;
    }

     &:focus-visible {
       // Use the same focus shadow as the solid button variant
       $rgb-var-name: --qc-#{$color-name}-rgb;
       box-shadow: 0 0 0 0.25rem rgba(var(#{$rgb-var-name}, 0, 0, 0), 0.5);
       outline: none;
    }

     // Disabled state specific overrides for outline buttons
     &:disabled,
     &.disabled {
       color: $color-value;
       background-color: transparent;
       // Opacity is handled by the base .btn:disabled style
     }
  }
}


// --- Button Sizes ---
// --- Button Sizes ---
.btn-lg {
  padding: 0.5rem 1rem;
  font-size: $spacing-unit * 1.25; // Use SCSS variable for calculation
  border-radius: var(--qc-border-radius-lg); // Larger border radius
}

.btn-sm {
  padding: 0.25rem 0.5rem;
  font-size: $spacing-unit * 0.875; // Use SCSS variable for calculation
  border-radius: var(--qc-border-radius-sm); // Smaller border radius
}
