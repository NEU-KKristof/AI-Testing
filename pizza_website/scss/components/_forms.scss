/**
 * Components / Forms
 *
 * Styles for various form controls like inputs, selects, textareas, checkboxes, radios.
 * Does not include form layout structure (handled by grid/utilities or _forms-layout.scss).
 */

// --- Form Labels ---
.form-label {
  display: inline-block;
  margin-bottom: 0.5rem; // Space below the label
  font-weight: 500; // Slightly bolder labels
}

// --- Base Form Control Styles (Inputs, Textareas, Selects) ---
.form-control {
  // Display and Box Model
  display: block;
  width: 100%;
  padding: 0.375rem 0.75rem; // Standard padding
  min-height: calc(var(--qc-line-height-base) * 1em + 0.75rem + calc(var(--qc-border-width) * 2)); // Calculate height based on line-height, padding, border

  // Typography
  font-size: var(--qc-font-size-base);
  font-weight: var(--qc-font-weight-base);
  line-height: var(--qc-line-height-base);
  color: var(--qc-body-color); // Use body text color

  // Appearance and Background
  background-color: var(--qc-white);
  background-clip: padding-box; // Clip background to padding box
  border: var(--qc-border-width) var(--qc-border-style) var(--qc-border-color);
  appearance: none; // Remove default browser styling (important for selects, etc.)

  // Border Radius and Transitions
  border-radius: var(--qc-border-radius);
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out; // Smooth transitions for focus

  // Placeholder Styling
  &::placeholder {
    color: var(--qc-gray-500);
    opacity: 1; // Override Firefox's lower default opacity
  }

  // Focus State Styling
  &:focus {
    color: var(--qc-body-color);
    background-color: var(--qc-white);
    // Use a lighter version of the primary color for the border
    border-color: color-mix(in srgb, var(--qc-primary) 50%, var(--qc-white));
    outline: 0; // Remove default browser outline
    // Apply a box-shadow for focus indication (using primary color RGB variable)
    box-shadow: 0 0 0 0.25rem rgba(var(--qc-primary-rgb), 0.25);
  }
   // Hide focus style if not using keyboard navigation
  &:focus:not(:focus-visible) {
      outline: 0;
      box-shadow: none;
      border-color: var(--qc-border-color); // Revert border color if needed
  }


  // Disabled and Readonly States
  &:disabled,
  &[readonly] {
    background-color: var(--qc-gray-200); // Lighter background for disabled/readonly
    border-color: var(--qc-border-color); // Ensure border color is consistent
    opacity: 1; // Ensure text is readable (don't rely on browser default opacity)
    cursor: not-allowed; // Indicate non-interactive state
  }
   &:disabled {
       // Further visual distinction for disabled vs readonly if needed
   }
}


// --- Specific Control Overrides ---

// Selects
select.form-control {
  // Need to add custom dropdown arrow, as appearance: none removes the default one.
  // This often requires background-image (SVG recommended).
  // Example using an embedded SVG arrow:
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right 0.75rem center; // Position arrow on the right
  background-size: 16px 12px; // Size of the arrow icon

  // Prevent text overlapping the arrow
  padding-right: 2.25rem; // Add extra padding on the right

  // Handle multiple selects differently (no arrow needed)
  &[multiple],
  &[size]:not([size="1"]) {
    padding-right: 0.75rem; // Reset right padding
    background-image: none; // Remove arrow
  }
}

// Textareas
textarea.form-control {
  min-height: calc(var(--qc-line-height-base) * 2em + 0.75rem + calc(var(--qc-border-width) * 2)); // Default height for ~2 lines
  resize: vertical; // Allow vertical resizing only
}

// File Inputs (Basic Styling - often requires JS for custom look)
.form-control[type="file"] {
  overflow: hidden; // Hide the default button text overflow

  // The default file input is hard to style consistently.
  // Often requires hiding the actual input and styling a label, using JS.
  // Basic focus state:
  &:focus {
     // Inherit standard focus styles
  }

  // No custom arrow needed
  &::file-selector-button {
      // Basic styling for the "Browse..." button if possible
      // This selector is relatively new
      padding: 0.375rem 0.75rem;
      margin: calc(-1 * 0.375rem) calc(-1 * 0.75rem); // Negative margin to fit within padding
      margin-inline-end: 0.75rem; // Space between button and text
      color: var(--qc-body-color);
      background-color: var(--qc-gray-200);
      border-inline-end: var(--qc-border-width) var(--qc-border-style) var(--qc-border-color);
      border-radius: 0; // No radius on the button itself
      transition: background-color .15s ease-in-out;
      &:hover {
          background-color: var(--qc-gray-300);
      }
  }
}


// --- Checkboxes and Radios ---
.form-check {
  // Layout for checkbox/radio groups
  display: block;
  min-height: calc(var(--qc-line-height-base) * 1em); // Ensure minimum height
  padding-left: 1.5em; // Space for the custom input
  margin-bottom: 0.125rem; // Small space between checks

  // Input element within the check group
  .form-check-input {
    float: left; // Position input to the left
    margin-left: -1.5em; // Pull input into the padding area

    // Base appearance - hide default input, prepare for custom styling
    appearance: none;
    width: 1em; // Size based on font size
    height: 1em;
    margin-top: calc((var(--qc-line-height-base) - 1) * 0.5em); // Vertically center roughly
    vertical-align: top;
    background-color: var(--qc-white);
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
    border: var(--qc-border-width) var(--qc-border-style) var(--qc-border-color-translucent); // Use translucent border
    transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out; // Smooth transitions

    // Custom styling for checkbox type
    &[type="checkbox"] {
      border-radius: 0.25em; // Slightly rounded square
    }

    // Custom styling for radio type
    &[type="radio"] {
      border-radius: 50%; // Circle
    }

    // Checked state styling
    &:checked {
      background-color: var(--qc-primary);
      border-color: var(--qc-primary);

      // Add checkmark/dot using SVG background image
      &[type="checkbox"] {
        // White checkmark SVG (URL encoded)
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='m6 10 3 3 6-6'/%3e%3c/svg%3e");
      }
      &[type="radio"] {
        // White dot SVG (URL encoded)
         background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='2' fill='%23fff'/%3e%3c/svg%3e");
      }
    }

    // Focus state styling
    &:focus {
      border-color: color-mix(in srgb, var(--qc-primary) 50%, var(--qc-white));
      outline: 0;
      box-shadow: 0 0 0 0.25rem rgba(var(--qc-primary-rgb), 0.25);
    }
     &:focus:not(:focus-visible) {
         outline: 0;
         box-shadow: none;
         border-color: var(--qc-border-color-translucent);
     }


    // Disabled state styling
    &:disabled {
      pointer-events: none;
      filter: none; // Remove any filters if applied
      opacity: 0.5;
    }
    // Dim the label when the input is disabled
    &:disabled ~ .form-check-label {
       opacity: 0.5;
       cursor: not-allowed;
    }
  }

  // Label associated with the check input
  .form-check-label {
    display: inline-block; // Ensure label aligns properly
    cursor: pointer; // Indicate label is clickable
  }
}

// --- Form Check Inline Layout ---
.form-check-inline {
  display: inline-block; // Place checks side-by-side
  margin-right: var(--qc-spacer); // Space between inline checks
  // Adjust padding/margin if needed for alignment
}


// --- Input Groups (Optional - for prepending/appending text/buttons to inputs) ---
// .input-group { display: flex; flex-wrap: wrap; ... }
// .input-group-text { display: flex; align-items: center; padding: ...; background-color: ...; border: ...; }
// Requires careful handling of border-radius and z-index for proper appearance.

// --- Form Validation States (Optional - for showing success/error) ---
// .is-valid, .is-invalid classes on .form-control, .form-select, .form-check-input
// Define styles for borders, background images (checkmarks/exclamation marks), and feedback text.
// .valid-feedback, .invalid-feedback { display: none; width: 100%; margin-top: .25rem; font-size: .875em; color: [success/danger color]; }
// .is-valid ~ .valid-feedback, .is-invalid ~ .invalid-feedback { display: block; }

